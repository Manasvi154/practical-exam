1. To download and install the Compose CLI plugin, run:
#curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
2.Apply executable permissions to the binary:
#chmod +x /usr/local/bin/docker-compose
3. Test the installation.
#docker compose version


1. Create a directory for the project:
#mkdir composetest
#cd composetest


2.(app.py)
import time
import redis
from flask import Flask
app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)
def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)
@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)


3. Create another file called requirements.txt in your project directory and paste the following code in:
flask
redis

4.Dockerfile
# syntax=docker/dockerfile:1
FROM python:3.10-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]



5.Create a file called compose.yml in your project directory and paste the following:
services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"


From your project directory, start up your application by running docker compose up.
#docker compose up

Enter http://PublicIP:8000/ in a browser to see the application running.
Check the output



